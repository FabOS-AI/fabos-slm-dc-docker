---
- name: "Create inventory with target host(s)"
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: "Check required variables"
      ansible.builtin.assert:
        that: "{{ item.name }} is defined"
        fail_msg: "Missing variable '{{ item.name }}': {{ item.description }}"
      with_items:
        - { name: "docker_compose_file",    description: "Content of Docker Compose file." }

    - name: Use inventory Helper to setup ansible inventory
      ansible.builtin.include_role:
        name: inventory_helper

    - include_role:
        name: "use"
        tasks_from: helper/get_docker_registry_credentials.yml
      loop: "{{ docker_registries_vault_paths|default([]) }}"
      loop_control:
        loop_var: docker_registry_vault_path

- name: Deploy container on docker host
  hosts: all
  gather_facts: yes
  become: no
  tasks:
    - set_fact:
        docker_registries: "{{ hostvars['localhost']['docker_registries'] }}"
      when: "(docker_registries_vault_paths is defined) and (docker_registries_vault_paths|length > 0)"

    - name: "Login to required Docker Registries"
      when: "(docker_registries is defined) and (docker_registries|length > 0)"
      block:
        - name: Docker Login (Linux)
          when: ansible_os_family != "Windows"
          community.docker.docker_login:
            registry: "{{ item.address }}"
            username: "{{ item.username }}"
            password: "{{ item.password }}"
            reauthorize: yes
          with_items: "{{ docker_registries }}"
          no_log: true

        - name: Docker Login (Windows)
          when: ansible_os_family == "Windows"
          block:
#            - name: Do login
#              ansible.windows.win_command: "docker login {{ item.address }} -u {{ item.username }} -p {{ item.password }}"
#              with_items: "{{ docker_registries }}"
#              no_log: false
#              become: no

            - name: Add Creds to WinCred
              community.windows.win_credential:
                name: "{{ item.address }}"
                type: generic_password
                username: "{{ item.username }}"
                secret: "{{ item.password }}"
                state: present
              loop: "{{ docker_registries }}"


#            - name: Lookup config.json
#              ansible.builtin.slurp:
#                src: '%userprofile%\.docker\config.json'
#              register: slrup_config_json
#
#            - name: Get Content of config.json
#              ansible.builtin.set_fact:
#                config_json_orig: "{{ slrup_config_json['content'] | b64decode | from_json }}"

#            - name: Create auths variable
#              ansible.builtin.set_fact:
#                auths: "{{ ( auths | default({}) ) | combine({ item.address: { 'auth': auth }}) }}"
#              with_items: "{{ docker_registries }}"
#              vars:
#                auth: "{{ (item.username+':'+item.password) | b64encode }}"

#            - set_fact:
#                config_json: "{{ config_json_orig | combine({ 'auths': auths}, recursive=true) }}"

#            - set_fact:
#                config_json: "{{ config_json_orig | combine({ 'credsStore': '' }, recursive=true) }}"

#            - name: Save credentials to config.json
#              ansible.windows.win_copy:
#                dest: '%userprofile%\.docker\config.json'
#                content: "{{ config_json | to_nice_json }}"





    - name: "Include use - deploy"
      include_role:
        name: "use"
        tasks_from: deploy.yml

    - name: "Logout from required Docker Registries"
      when: "(docker_registries is defined) and (docker_registries|length > 0)"
      block:
        - name: Docker Logout (Linux)
          when: ansible_os_family != "Windows"
          community.docker.docker_login:
            registry: "{{ item.address }}"
            state: absent
          with_items: "{{ docker_registries }}"
          no_log: true

        - name: Do Logout (Windows)
          when: ansible_os_family == "Windows"
          ansible.windows.win_command: "docker logout {{ item.address }}"
          with_items: "{{ docker_registries }}"
          no_log: false
          become: no


#        - name: Restore original config.json content (Windows)
#          when: ansible_os_family == "Windows"
#          ansible.windows.win_copy:
#            dest: '%userprofile%\.docker\config.json'
#            content: "{{ config_json_orig | to_nice_json }}"
